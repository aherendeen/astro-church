---
export interface Props {
	title: string;
	image?: {
		src: string;
		alt: string;
	};
	href?: string;
	// Support both `className` and `class` to match how callers pass attributes
	className?: string;
	class?: string;
	imageLayout?: "top" | "background";
}

const { title, image, href, className = "", imageLayout = "top" } = Astro.props;
// Prefer explicit `className`, but fall back to `class` when callers use the HTML attribute
const classAttr = className || Astro.props.class || "";
const Element = href ? "a" : "div";
---

<Element
	href={href}
	aria-label={href ? title : undefined}
	class:list={[
		"card group overflow-hidden",
		{ relative: imageLayout === "background" },
		classAttr,
	]}
>
	{
		image && (
			<div
				class:list={[
					"overflow-hidden",
					{ "absolute inset-0": imageLayout === "background" },
				]}
			>
				<img
					src={image.src}
					alt={image.alt}
					class:list={[
						"w-full object-cover object-center transition-transform duration-300 group-hover:scale-105",
						{
							"h-full": imageLayout === "background",
							"h-auto": imageLayout === "top",
						},
					]}
				/>
			</div>
		)
	}

	<div class:list={["p-5", { relative: imageLayout === "background" }]}>
		<h3 class="mb-2 text-xl font-bold">{title}</h3>
		<div class="text-gray-700">
			<slot />
		</div>
	</div>
</Element>
